<!DOCTYPE html>
<html>

{{> headerMeta}}

<body>
	{{> header }}
	<div id="mainContainer">

		<div class="flex-row">
			<div class="flex-column">
				El sorteador tratará de repartir todos los nombres suministrados en equipos iguales. Por ahora se manejan 3 equipos.<br>
				Puedes tocar una persona para eliminarla del sorteo.
			</div>
		</div>

		<div class="flex-row" id="playerInputRow">
			<div class="flex-column">
				<input type="text" name="nombre" id="playerInput" placeholder="Jugador...">
			</div>
			<div class="flex-column">
				<select id="level">
					{{#each levels}}
				  		<option value="{{this}}">{{this}}</option>
			  		{{/each}}
				</select>
			</div>
			<div class="flex-column">
				<button id="addPlayerBtn" class="btn dark-btn">
					Agregar
				</button>
			</div> 
		</div>

		<div class="flex-row" id="teamCountRow">
			<div class="flex-column">
				Cantidad de equipos:
			</div>
			<div class="flex-column">
				<select id="teamCount">
					<option value="2">2</option>
					<option value="3">3</option>
					<option value="4">4</option>
					<option value="5">5</option>
				</select>
			</div>
		</div>

		<div class="flex-row overflow-x" id="levelContainerRow">
			{{#each levels}}
				<div class="flex-column">
					<div class="level-container">
						<p> Nivel {{this}}</p>
						<textarea readonly id="level{{this}}" class="player-text-area"></textarea>
					</div>
				</div>
			{{/each}}
		</div>

		<div class="flex-row" id="sortBtnRow">
			<div class="flex-column">
				<button id="sortPlayersBtn" class="btn aqua-btn">
					Sortear!
				</button>
			</div>
		</div>

		<div class="flex-row overflow-x" id="sortedTeamsRow">
		</div>

		<div class="flex-row" id="copyTeamsRow">
			<div class="flex-column">
				<button id="copyToClipboardBtn" class="btn aqua-btn">
					Copiar equipos
				</button>
			</div>
		</div>

		<div class="flex-row" id="supportRow">
			<div class="flex-column">
				<span>
						Tienes alguna sugerencia para mejorar la página o quieres reportar un error?<br> 
						Puedes escribirme @pulga1094 o ver el repositorio <a href="https://github.com/luismzk/teammatcher">Github</a> para reportar un issue.<br>
						Diviértanse!
				</span>
			</div>
		</div>

	</div> 
	{{> footer}}

</body>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>

{{!-- script de funciones de jugadores --}}
<script type="text/javascript">

	function removePlayer(line, textArea) {

		let t = $(textArea)[0]; 
		// los jugadores en el nivel seleccionado
		let players = t.value.split("\n");
		// elimina el jugador seleccionado
		players.splice(line,1)
		// vacia el text area
		$(textArea).text("")
		// quita espacios vacios del array (no se porque pasan)
		players = players.filter( (play) => play)

		// repopula el text area
		players.forEach((rem) => $(textArea).append(rem + "\n") )

	};

	$(".player-text-area").click(function (){

		const t = $(this)[0]; 
		// la fila que toca
		let rowNumber = t.value.substr(0, t.selectionStart).split("\n").length;

		// el valor de la linea seleccionada
		let selected = t.value.split("\n")[rowNumber-1];
		// si el campo tiene texto
		if (selected != ""){

			return Swal.fire({
				title: 'Cuidado!',
				text: "Eliminar al jugador " + selected + "?",
				icon: 'question',
				confirmButtonText: 'Eliminar',
				confirmButtonColor: "#16A116",
				showDenyButton: true,
				denyButtonText: "Volver"
			}).then( (SweetAlertResult) => {
				if (SweetAlertResult.isConfirmed)
					removePlayer(rowNumber - 1, $(this))				
			})

		}

	})

	$("#addPlayerBtn").click( function () {

		const playerName = $("#playerInput").val();
		const level = $("#level").val()

		if (playerName == "")
		  return Swal.fire({
			  title: 'Error!',
			  text: 'El nombre no puede ser vacío.',
			  icon: 'error',
			  confirmButtonText: 'Volver'
			})

		$("#level" + level).append(playerName + "\n")
		updateCookie(level, playerName);

	})


	function getPlayers(index){

		let players = $.trim($("#level" + index).val());
		let players_full;

		// Guarda todos los nombres de un nivel en un array
		if (players != "")
			players_full = players.split('\n');

		return players_full;

	}

	let team1 = [], 
	team2 = [], 
	team3 = [];

	function checkEmpty(players){
		if (!players)
			return true
		else
			return false
	}

	$("#sortPlayersBtn").click(function() {

		let players_level_1 = getPlayers( 1 )
		let players_level_2 = getPlayers( 2 )
		let players_level_3 = getPlayers( 3 )
		let players_level_4 = getPlayers( 4 )
		let players_level_5 = getPlayers( 5 )
		let teamCount = $("#teamCount").val()
		$("#sortedTeamsRow, #copyTeamsRow").css("display", "none");

		if (checkEmpty(players_level_1) && checkEmpty(players_level_2) && checkEmpty(players_level_3) && checkEmpty(players_level_4) && checkEmpty(players_level_5) )
			return Swal.fire({
				title: 'Error!',
				text: 'Debe haber al menos un jugador para sortear',
				icon: 'error',
				confirmButtonText: 'Volver'
			})

		$.get( "/sortTeams", { 
			level1: players_level_1,
			level2: players_level_2,
			level3: players_level_3,
			level4: players_level_4,
			level5: players_level_5,
			teamCount
		}).done(function( data ) {
			$("#sortedTeamsRow").empty()

			data.forEach((team, index) => {
				const teamNumber = index + 1; // index starts at 0
				createTeamTextArea(teamNumber)
				team.forEach((player) => $(`#team${teamNumber}`).append(player + "\n"))
			})

			$("#sortedTeamsRow, #copyTeamsRow").show(300).css("display", "flex");

		}).fail(function(xhr, textStatus, errorThrown) {
			return Swal.fire({
				title: 'Error!',
				text: "Error sorteando equipos. Error " + errorThrown,
				icon: 'error',
				confirmButtonText: 'Volver'
			})
		});
	});

	const createTeamTextArea = (teamNumber) => {
		const html = 
				`<div class="flex-column">
					<div class="team-container">
						<p>Equipo ${teamNumber}</p>
						<textarea readonly id="team${teamNumber}" class="team-text-area"></textarea>
					</div>
				</div>`

		$("#sortedTeamsRow").append(html)
	}
</script>

{{!-- script para copiar al portapapeles --}}
<script>
	$("#copyToClipboardBtn").click(function (){

		const emojiArray = ["😈","🖤","💛","💙","💜","💚","🧡","❤️","👽","👩‍🦲️","🦶️","🧛","👁","🧙‍♂️","🧓","👺"]

		try {
			const teams = $(".team-text-area")
	    const el = document.createElement('textarea');
			for (let i = 0; i < teams.length; i++) {
				const teamPlayers = $(teams[i]).val();
				const random = Math.floor( Math.random() * emojiArray.length )
				el.append("Equipo "+ emojiArray[random] +"\n");
				el.append(teamPlayers + "\n");
			}

	    document.body.appendChild(el);
	    el.select();
	    document.execCommand('copy');
	    document.body.removeChild(el);

		  return Swal.fire({
			  title: 'Exito!',
			  text: "Equipos copiados exitosamente!",
			  icon: 'success',
			  confirmButtonText: 'Volver'
			})

		} catch (e){

		  return Swal.fire({
			  title: 'Error!',
			  text: 'Error en la copia de texto!. Error: ' + e,
			  icon: 'error',
			  confirmButtonText: 'Volver'
			})

		}


  });
</script>

{{!-- script para la cookie --}}
<script>

	$(document).ready(function (){

		// si existe informacion de niveles en la cookie, pregunta si quiere cargar gente
		if ( getCookie("level1") || getCookie("level2") || 
			getCookie("level3") || getCookie("level4") || 
			getCookie("level5") )
		  return Swal.fire({
			  title: 'Hola!',
			  text: "Vemos que has estado aqui antes, deseas cargar tus jugadores anteriores?",
			  icon: 'info',
			  confirmButtonText: 'Si!',
			  confirmButtonColor: "#16A116",
			  showDenyButton: true,
			  denyButtonText: "Nope"
			}).then( (SweetAlertResult) => {
				if (SweetAlertResult.isConfirmed)
					loadCookiePlayers()
				else if (SweetAlertResult.isDenied){
					// si no quiere cargar los previos, reinicia la cookie
					updateCookie()
				}
			})
  });

	// https://www.w3schools.com/js/js_cookies.asp
	// busca el atributo de una cookie con el nombre
  function getCookie(cname) {
	  const name = cname + "=";
	  const decodedCookie = decodeURIComponent(document.cookie);
	  const ca = decodedCookie.split(';');
	  for(let i = 0; i < ca.length; i++) {

	    let c = ca[i];

	    while (c.charAt(0) == ' ')
	      c = c.substring(1);
	    
	    if (c.indexOf(name) == 0)
	      return c.substring(name.length, c.length);
	    
	  }
	  return "";
	}

	// agrega los jugadores a la cookie
	// exDays es dias para que expire la galleta. 3 semanas por defecto
	function updateCookie(exDays = 21) {
	  const d = new Date();
	  d.setTime(d.getTime() + (exDays*24*60*60*1000));
	  const expires = "expires="+ d.toUTCString();

	  for (let i = 1; i <= 5; i++ ){
	  	// todos los jugadores de ese nivel
	  	const players = getPlayers( i )

		  let cookiePlayers = "";
		  if (players)
		  	players.forEach( play => cookiePlayers += play + ",")
		  // elimino la coma del ultimo jugador
		  cookiePlayers = cookiePlayers.slice(0, -1)

		  document.cookie = "level" + i + "=" + cookiePlayers + ";" + expires + ";path=/";

	  }
	  // actualizo la expiracion de la cookie
		document.cookie = expires;

	}

	// carga los jugadores de la cookie a los textarea
	function loadCookiePlayers(){

		// revisa los 5 niveles
		for (let i = 1; i <= 5; i++){
			// busca los jugadores de un nivel en la cookie
			const players = getCookie("level" + i)
			// si hay jugadores, carga
			if (players){
				// separa por la coma que separa los jugadores
				playersArray = players.split(",")
				// agrega los jugadores al textarea
				for (let j = 0; j < playersArray.length; j++)
					$("#level" + i).append(playersArray[j] + "\n")

			}
		}

		updateCookie()

	}

</script>


</html>